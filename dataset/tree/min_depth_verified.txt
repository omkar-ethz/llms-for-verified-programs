def min_depth(root: Optional[TreeNode]) -> int:
    """Returns the number of nodes along the shortest path from the root node down to the nearest leaf node."""
    Requires(Implies(root is not None, tree(root)))
    Ensures(Implies(root is not None, tree(root)))
    if root is None:
        return 0
    if Unfolding(tree(root), root.left is None and root.right is None):
        return 1
    if Unfolding(tree(root), root.left) is None:
        Unfold(tree(root))
        d = 1 + min_depth(root.right)
        Fold(tree(root))
        return d
    if Unfolding(tree(root), root.right) is None:
        Unfold(tree(root))
        d = 1 + min_depth(root.left)
        Fold(tree(root))
        return d
    Unfold(tree(root))
    d = 1 + min(min_depth(root.left), min_depth(root.right))
    Fold(tree(root))
    return d
